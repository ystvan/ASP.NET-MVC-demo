@*This View is bound, it is looking for a model of type List<Car>. And then we can pass an instance of
    List<Car> into the View theough using the View() helper method.

    Lower case 'm-model' is used here as a directive, saying this is what the type of this view will be.
*@

@model List<BobDemoMVC.Models.Car>
    
@*Razor: code block expression below (variable scope NOT valid here!):*@

@{
    ViewBag.Title = "Index";
    var value = 1;
}

@*we can reference the "value" variable here*@

@{
    value += 1;

    var name = "Bob";

    var day = DateTime.Now.DayOfWeek.ToString();



    <p>Howdy, @name. Today is @day!</p>
    <p>Howdy @name. Aren't @(day)s the best?</p>


    var prodID = 123;
    <p>Product ID: ACME@(prodID)</p>
}



<p>Value: @value.ToString("C")</p>

<h2>Istvan Changed this</h2>
<h3>Hello again</h3>

@*Referencing the viewBag by referencing it, what we created in the controller, we can inject into the
    view by using the ViewBag
*@

@*Razor: inline expression below (note the exclusion of semicolon)*@

<p>@ViewBag.MyMethod</p>

@*strongly typed model

    We are able to access that List<Car> using the Model (capital M) => is the ACCESSOR, this is how
    actually get the instance of the Model that was passed in.

*@

@foreach (var car in @Model)
{
    <p>@car.Id - @car.Make - @car.Model</p>
}


@*helper methods*@

@helper pluralizeChildren(int childCount)
{
    @(childCount == 1 ? "child" : "children");

}

@{
    var childCount = 2;
    <p>I have @childCount @pluralizeChildren(@childCount)</p>
}

@helper pluralizer(int amount, string singular, string plural)
{
    @(amount == 1 ? singular : plural)
}

@{
    var crisesCount = 2;

    <p>Mr President, there @pluralizer(crisesCount, "is one crisis", "are " + crisesCount + " crises") you must deal immediately</p>
}


<p>
    Mrs. President, there
    @if (crisesCount == 1)
    {
        <span>is one crisis</span>
    }
    else
    {
        <span>are @crisesCount crises</span>
    }
    
    your husband must deal with immediately!

</p>